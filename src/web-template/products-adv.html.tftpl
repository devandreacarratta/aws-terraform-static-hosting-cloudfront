<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${shop_name} - Advanced Products</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <nav class="navbar">
            <div class="nav-brand">
                <h1>${shop_name}</h1>
            </div>
            <ul class="nav-menu">
                <li><a href="index.html">Home</a></li>
                <li><a href="products.html">Products</a></li>
                <li><a href="products-adv.html" class="active">Advanced Products</a></li>
                <li><a href="product-add.html">Add Product</a></li>
            </ul>
        </nav>
    </header>

    <main>
        <section class="page-header">
            <div class="container">
                <h2>${advanced_products_title}</h2>
                <p>${advanced_products_subtitle}</p>
            </div>
        </section>

        <section class="products-advanced">
            <div class="container">
                <div class="filters">
                    <div class="filter-group">
                        <label for="category-filter">${category_label}:</label>
                        <select id="category-filter" onchange="filterProducts()">
                            <option value="">${all_categories}</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label for="price-filter">${price_range_label}:</label>
                        <select id="price-filter" onchange="filterProducts()">
                            <option value="">${all_prices}</option>
                            <option value="0-50">${price_range_1}</option>
                            <option value="50-100">${price_range_2}</option>
                            <option value="100+">${price_range_3}</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label for="search-input">${search_label}:</label>
                        <input type="text" id="search-input" placeholder="${search_placeholder}" oninput="filterProducts()">
                    </div>
                </div>

                <div class="loading" id="loading">
                    <p>${loading_text}</p>
                </div>
                
                <div class="products-table-container" id="products-container">
                    <table class="products-table" id="products-table">
                        <thead>
                            <tr>
                                <th onclick="sortTable(0)">${product_name_header} <span class="sort-arrow">↕</span></th>
                                <th onclick="sortTable(1)">${category_header} <span class="sort-arrow">↕</span></th>
                                <th onclick="sortTable(2)">${price_header} <span class="sort-arrow">↕</span></th>
                                <th onclick="sortTable(3)">${stock_header} <span class="sort-arrow">↕</span></th>
                                <th>${actions_header}</th>
                            </tr>
                        </thead>
                        <tbody id="products-tbody">
                            <!-- Products will be loaded from JSON -->
                        </tbody>
                    </table>
                </div>

                <div class="error-message" id="error-message" style="display: none;">
                    <p>${error_loading_products}</p>
                    <button onclick="loadProducts()" class="btn btn-primary">${retry_text}</button>
                </div>
            </div>
        </section>
    </main>

    <footer>
        <div class="container">
            <p>&copy; ${current_year} ${shop_name}. ${rights_reserved}</p>
            <p class="kiro-credit">Generated by <a href="https://kiro.dev" target="_blank" rel="noopener">kiro.dev</a></p>
        </div>
    </footer>

    <script>
        const JSON_URL = '${json_url}';
        let allProducts = [];
        let filteredProducts = [];
        
        async function loadProducts() {
            const loading = document.getElementById('loading');
            const container = document.getElementById('products-container');
            const errorMessage = document.getElementById('error-message');
            
            loading.style.display = 'block';
            errorMessage.style.display = 'none';
            container.style.display = 'none';
            
            try {
                const response = await fetch(JSON_URL);
                if (!response.ok) throw new Error('${network_error}');
                
                allProducts = await response.json();
                filteredProducts = [...allProducts];
                
                loading.style.display = 'none';
                container.style.display = 'block';
                
                populateFilters();
                displayProducts();
            } catch (error) {
                loading.style.display = 'none';
                errorMessage.style.display = 'block';
                console.error('Error loading products:', error);
            }
        }
        
        function populateFilters() {
            const categoryFilter = document.getElementById('category-filter');
            const categories = [...new Set(allProducts.map(p => p.category))];
            
            categories.forEach(category => {
                const option = document.createElement('option');
                option.value = category;
                option.textContent = category;
                categoryFilter.appendChild(option);
            });
        }
        
        function displayProducts() {
            const tbody = document.getElementById('products-tbody');
            tbody.innerHTML = '';
            
            if (filteredProducts.length === 0) {
                tbody.innerHTML = '<tr><td colspan="5" class="no-products">${no_products_found}</td></tr>';
                return;
            }
            
            filteredProducts.forEach(product => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>$${product.name}</td>
                    <td>$${product.category}</td>
                    <td>${currency_symbol}$${product.price}</td>
                    <td>$${product.stock}</td>
                    <td>
                        <button class="btn btn-small btn-primary" onclick="viewProduct('$${product.id}')">${view_text}</button>
                        <button class="btn btn-small btn-secondary" onclick="editProduct('$${product.id}')">${edit_text}</button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }
        
        function filterProducts() {
            const categoryFilter = document.getElementById('category-filter').value;
            const priceFilter = document.getElementById('price-filter').value;
            const searchInput = document.getElementById('search-input').value.toLowerCase();
            
            filteredProducts = allProducts.filter(product => {
                const matchesCategory = !categoryFilter || product.category === categoryFilter;
                const matchesSearch = !searchInput || 
                    product.name.toLowerCase().includes(searchInput) ||
                    product.description.toLowerCase().includes(searchInput);
                
                let matchesPrice = true;
                if (priceFilter) {
                    const price = parseFloat(product.price);
                    if (priceFilter === '0-50') matchesPrice = price <= 50;
                    else if (priceFilter === '50-100') matchesPrice = price > 50 && price <= 100;
                    else if (priceFilter === '100+') matchesPrice = price > 100;
                }
                
                return matchesCategory && matchesSearch && matchesPrice;
            });
            
            displayProducts();
        }
        
        function sortTable(columnIndex) {
            const table = document.getElementById('products-table');
            const tbody = table.querySelector('tbody');
            const rows = Array.from(tbody.querySelectorAll('tr'));
            
            const isAscending = table.dataset.sortOrder !== 'asc';
            table.dataset.sortOrder = isAscending ? 'asc' : 'desc';
            
            rows.sort((a, b) => {
                const aValue = a.cells[columnIndex].textContent.trim();
                const bValue = b.cells[columnIndex].textContent.trim();
                
                if (columnIndex === 2) { // Price column
                    const aPrice = parseFloat(aValue.replace('${currency_symbol}', ''));
                    const bPrice = parseFloat(bValue.replace('${currency_symbol}', ''));
                    return isAscending ? aPrice - bPrice : bPrice - aPrice;
                } else if (columnIndex === 3) { // Stock column
                    return isAscending ? parseInt(aValue) - parseInt(bValue) : parseInt(bValue) - parseInt(aValue);
                } else {
                    return isAscending ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
                }
            });
            
            rows.forEach(row => tbody.appendChild(row));
        }
        
        function viewProduct(id) {
            // Placeholder for view product functionality
            alert('${view_product_message}: ' + id);
        }
        
        function editProduct(id) {
            // Placeholder for edit product functionality
            alert('${edit_product_message}: ' + id);
        }
        
        // Load products when page loads
        document.addEventListener('DOMContentLoaded', loadProducts);
    </script>
</body>
</html>